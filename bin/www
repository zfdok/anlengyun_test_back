#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('demo:server');
 var http = require('http');
 var fs = require('fs');
 
 // 引入https
 const https = require('https')
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 
 const options = {
   key: fs.readFileSync('ssl/anlengyun.com.key'),
   cert: fs.readFileSync('ssl/anlengyun.com.pem'),
 }
 
 var httpsserver = https.createServer(options, app.callback())
 httpsserver.listen(port, (err) => {
   if (err) {
     console.log('server init error', err);
   } else {
     console.log('server running at port :' + port);
   }
 });
 httpsserver.on('error', onError);
 httpsserver.on('listening', onListening);
 
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTPs server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTPs server "listening" event.
  */
 
 function onListening() {
   var addr = httpsserver.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }